/*
    COP3330 Final Project
    Ashley Fram 
*/


import java.io.FileNotFoundException;
import java.util.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.Map;
import java.util.Scanner;
import java.util.Set; 






abstract class Course {
    private int crn;
    private String prefix;
    private String title;
    private String location;
    private String modality;

    // Constructor
    public Course(int crn, String prefix, String title, String location, String modality) {
        this.crn = crn;
        this.prefix = prefix;
        this.title = title;
        this.location = location;
        this.modality = modality;
    }

    // Getters and setters
    public int getCrn() {
        return crn;
    }

    public String getPrefix() {
        return prefix;
    }

    public String getTitle() {
        return title;
    }

    public String getLocation() {
        return location;
    }

    public String getModality() {
        return modality;
    }
}

class Lecture extends Course {
    private boolean isGraduate;
      private Set<Integer> enrolledStudents;


    // Constructor
    public Lecture(int crn, String prefix, String title, String location, String modality) {
      
        super(crn, prefix, title, location, modality);
              this.enrolledStudents = new HashSet<>();

    }

  
  public Set<Integer> getEnrolledStudents() {
        return enrolledStudents;
    }

    public void setEnrolledStudents(Set<Integer> enrolledStudents) {
        this.enrolledStudents = enrolledStudents;
    }

  
}

class Lab extends Course {
    // Constructor
    public Lab(int crn, String prefix, String title, String location, String modality) {
        super(crn, prefix, title, location, modality);
    }
}

abstract class Person {
    private String name;
    private int ucfId;

    // Constructor
    public Person(String name, int ucfId) {
        this.name = name;
        this.ucfId = ucfId;
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public int getUcfId() {
        return ucfId;
    }
}

class Faculty extends Person {
    private String rank;
    private String officeLocation;
    private List<Lecture> lecturesTaught;

    // Constructor
    public Faculty(String name, int ucfId, String rank, String officeLocation, List<Lecture> lecturesTaught) {
        super(name, ucfId);
        this.rank = rank;
        this.officeLocation = officeLocation;
        this.lecturesTaught = lecturesTaught;
    }

 public Map<Integer, Lecture> getTASchedule() {
        Map<Integer, Lecture> taSchedule = new HashMap<>(); // define taSchedule here

    return taSchedule;
}
  
    // Getters
    public String getRank() {
        return rank;
    }

    public String getOfficeLocation() {
        return officeLocation;
    }

    public List<Lecture> getLecturesTaught() {
        return lecturesTaught;
    }
}

class TA extends Person {
    private Faculty advisor;
    private String expectedDegree;
    private List<Lab> labsSupervised;
    private List<Course> coursesTaken;

    // Constructor
    public TA(String name, int ucfId, Faculty advisor, String expectedDegree, List<Lab> labsSupervised, List<Course> coursesTaken) {
        super(name, ucfId);
        this.advisor = advisor;
        this.expectedDegree = expectedDegree;
        this.labsSupervised = labsSupervised;
        this.coursesTaken = coursesTaken;
    }

    // Getters
    public Faculty getAdvisor() {
        return advisor;
    }

    public String getExpectedDegree() {
        return expectedDegree;
    }

    public List<Lab> getLabsSupervised() {
      return labsSupervised;
    }
}

















public class Main {

    private static Map<Integer, Faculty> faculties = new HashMap<>();
    private static Map<Integer, Student> students = new HashMap<>();
    private static Map<Integer, Lecture> lectures = new HashMap<>();
    private static Map<Integer, Lab> labs = new HashMap<>();

    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
      
    System.out.print("Enter the absolute path of the file: ");
    String filePath = scanner.nextLine();
    File file = new File(filePath);
      
    while (!file.exists()) {
        System.out.println("Sorry no such file or invalid file name.");
        System.out.print("Try again: ");
        filePath = scanner.nextLine();
        file = new File(filePath);
    }
      
    System.out.println("File Found! Let's proceed...");
    System.out.println("*****************************************");

    loadFromFile(filePath);

    int choice = -1;
    // rest of the code


        while (choice != 7) {
            System.out.println("Choose one of these options:");
            System.out.println("1- Add a new Faculty to the schedule");
            System.out.println("2- Enroll a Student to a Lecture");
            System.out.println("3- Print the schedule of a Faculty");
            System.out.println("4- Print the schedule of a TA");
            System.out.println("5- Print the schedule of a Student");
            System.out.println("6- Delete a Lecture");
            System.out.println("7- Exit");

            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
            case 1:
                addFaculty(scanner);
                break;
            case 2:
                enrollStudent(scanner);
                break;
            case 3:
                printFacultySchedule(scanner);
                break;
            case 4:
                printTASchedule(scanner);
                break;
            case 5:
                printStudentSchedule(scanner);
                break;
            case 6:
                deleteLecture(scanner);
                break;
            case 7:
                goodbyeBye(scanner);
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
            }

            System.out.println("*****************************************");
        }

        scanner.close();
    }

    private static void loadFromFile(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                int crn = Integer.parseInt(parts[0]);
                String title = parts[1];
                String type = parts[1];
                String location = parts[1];
                String prefix = parts[1];
                String modality = parts[1];
                              

                if (type.equals("Lecture")) {
                    Lecture lecture = new Lecture(crn, prefix, title, location, modality);
                    lectures.put(crn, lecture);
                } else if (type.equals("Lab")) {
                    int parentCrn = Integer.parseInt(parts[4]);
                    Lab lab = new Lab(crn, prefix, title, location, modality/*, parentCrn*/);
                    labs.put(crn, lab);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

  // Incorrect digits for id
public static class IdException extends Exception {
    public IdException(String message) {
        super(message);
    }
}

// 7
private static void goodbyeBye(Scanner scanner){

    System.out.print("You have made a deletion of at least one lecture. Would you like to print the copy of lec.txt? Enter y/Y for Yes or n/N for No: ");
while (true) {
    String response = scanner.nextLine().trim().toLowerCase();

    if (response.equals("y")) {
        System.out.println("Printing copy of lec.txt...");
        // code to print copy of lec.txt
        break; // exit the loop
    } else if (response.equals("n")) {
        System.out.println("Okay, lec.txt will not be printed.");
        break; // exit the loop
    } else {
        System.out.print("Is that a yes or no? Enter y/Y for Yes or n/N for No: ");
    }
}
  System.out.print("Bye!");
  
}

  
  // Choice 1, Add a new Faculty to the schedule

private static void addFaculty(Scanner scanner) {
while (true) {
    System.out.print("Enter UCF ID: ");
    int id;
    try {
        id = scanner.nextInt();
        if (String.valueOf(id).length() != 7) {
            throw new IdException(">>>>>>>>>>>Sorry incorrect format. (Ids are 7 digits)");
        }
    } catch (InputMismatchException e) {
        System.out.println("Sorry, the entered ID is invalid. Please enter a positive 7-digit integer.");
        scanner.next(); // clear scanner buffer
        continue; // prompt user to enter ID again
    } catch (IdException e) {
        System.out.println(e.getMessage());
        continue; // prompt user to enter ID again
    }
    scanner.nextLine(); // consume the rest of the input line
    
    if (faculties.containsKey(id)) {
        System.out.println("Faculty with this ID already exists.");
    } else {
        break; // exit the loop if ID is valid and not already in use
    }
}

// continue with the rest of the code here


        System.out.print("Enter name: ");
        String name = scanner.nextLine();

  while (true) {
    System.out.print("Enter rank: ");
    String rank = scanner.nextLine().toLowerCase();
    if (!rank.equals("professor")) {
        System.out.println("Sorry, rank must be 'Professor'.");
        continue;
    }
    // rank is valid, do something with it
    break;
}



      System.out.print("Enter office location: ");
    String officeLocation = scanner.nextLine();



 int numLectures = 0;
        boolean validInput = false;
        while (!validInput) {
            try {
                System.out.print("Enter how many lectures: ");
                numLectures = Integer.parseInt(scanner.nextLine());
                validInput = true;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input: please enter a valid integer.");
            }
        }
  
  //  System.out.print("Enter how many lectures: ");
    //int numLectures = scanner.nextInt();
    //scanner.nextLine();



 // Ask user to enter CRNs separated by a space
System.out.print("Enter the crns of the lecture(s): ");
String input = scanner.nextLine();

// Split the input into individual CRNs
String[] crns = input.split(" ");

try {
    // Open the lec.txt file for reading
    File file = new File("lec.txt");
    Scanner fileScanner = new Scanner(file);

    // Create a map to store the labs for each lecture
    Map<String, List<String>> labs = new HashMap<>();

    // Read each line of the file
    while (fileScanner.hasNextLine()) {
        String line = fileScanner.nextLine();

        // Split the line into its components
        String[] components = line.split(",");

        // Check if the line contains one of the CRNs
        for (String crn : crns) {
            if (components[0].equals(crn)) {
                // Print the lecture information
                System.out.println("[" + line + "] Added!");

                if (components.length > 2) {
                    String[] labComponents = components[2].split(":");
                    if (labComponents.length > 1) {
                        String[] labNumbers = labComponents[1].split(",");
                        List<String> labList = new ArrayList<>(Arrays.asList(labNumbers));
                        labs.put(crn, labList);
                    }
                }
            }
        }
    }

    // Print the labs information
    for (String crn : crns) {
        if (labs.containsKey(crn)) {
            System.out.println("[" + crn + "] has these labs:");
            List<String> labList = labs.get(crn);
            for (String lab : labList) {
                System.out.println(lab);
            }
        }
    }

    // Close the file scanner
    fileScanner.close();

} catch (FileNotFoundException e) {
    System.out.println("File not found!");
} catch (ArrayIndexOutOfBoundsException e) {
    System.out.println("Invalid input: please enter valid CRNs separated by a space.");
}








  

// TA output 

        System.out.print("Enter the TA's id for 19745: ");
        int taId1 = scanner.nextInt();
        scanner.nextLine();

        // A student can’t be a TA for a lecture in which that student is taking

        System.out.print("TA found as a student: ");
        String taName1 = scanner.nextLine();     

        // This means that " + taName1 + " isn't a student in Programming Languages

        System.out.print("TA's supervisor's name: ");
        String supervisorName1 = scanner.nextLine();

        System.out.print("Degree Seeking: ");
        String degree1 = scanner.nextLine();

        System.out.print("Enter the TA's id for 36598: ");
        int taId2 = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Name of TA: ");
        String taName2 = scanner.nextLine();

        System.out.print("TA's supervisor's name: ");
        String supervisorName2 = scanner.nextLine();

        System.out.print("Degree Seeking: ");
        String degree2 = scanner.nextLine();

        System.out.print("Enter the TA's id for 20315: ");
        int taId3 = scanner.nextInt();
        scanner.nextLine();

    }



  
  // choice 2, Enroll a Student to a Lecture

private static void enrollStudent(Scanner scanner) {
            while (true) {
    System.out.print("Enter UCF ID: ");
    int id;
    try {
        id = scanner.nextInt();
        if (String.valueOf(id).length() != 7) {
            throw new IdException(">>>>>>>>>>>Sorry incorrect format. (Ids are 7 digits)");
        }
        break; // exit the loop if a valid ID is entered
    } catch (InputMismatchException e) {
        System.out.println("Sorry, the entered ID is invalid. Please enter a positive 7-digit integer.");
        scanner.next(); // clear scanner buffer
    } catch (IdException e) {
        System.out.println(e.getMessage());
    }
    scanner.nextLine(); // consume the rest of the input line
}

// continue with the rest of the code here


  System.out.println("Record found/name: ");
      scanner.nextLine();

 // System.out.println("Which lecture to enroll [] in: ");
    //  scanner.nextLine();

 // System.out.print("[] has these labs: ");
    //   scanner.nextLine();


  System.out.println("[] is added to lab:");
    scanner.nextLine();


  System.out.print("Student enrolled!");
}

  // choice 3, Print the schedule of a Faculty

private static void printFacultySchedule(Scanner scanner) {
              int facultyId;
while (true) {
    System.out.print("Enter UCF id: ");
    try {
        facultyId = scanner.nextInt();
        if (String.valueOf(facultyId).length() != 7) {
            throw new IdException(">>>>>>>>>>>Sorry incorrect format. (Ids are 7 digits)");
        }
        break; // Exit the loop if a valid ID is entered
    } catch (InputMismatchException e) {
        System.out.println("Sorry, the entered ID is invalid. Please enter a positive 7-digit integer.");
        scanner.next(); // clear scanner buffer
    } catch (IdException e) {
        System.out.println(e.getMessage());
    }
    scanner.nextLine(); // add this line to consume the rest of the input line
}

Faculty faculty = faculties.get(facultyId);
//System.out.println(faculty.getName() + "is teaching the following lectures:");

  System.out.println("[] is teaching the following lectures:");

}

  // choice 4, print the schedule of a TA

private static void printTASchedule(Scanner scanner) {
               int taId;
while (true) {
    System.out.print("Enter UCF id: ");
    try {
        taId = scanner.nextInt();
        if (String.valueOf(taId).length() != 7) {
            throw new IdException(">>>>>>>>>>>Sorry incorrect format. (Ids are 7 digits)");
        }
        break; // break out of loop if id is valid
    } catch (InputMismatchException e) {
        System.out.println("Sorry, the entered ID is invalid. Please enter a positive 7-digit integer.");
        scanner.next(); // clear scanner buffer
    } catch (IdException e) {
        System.out.println(e.getMessage());
    }
    scanner.nextLine(); // consume rest of input line
}

if (!faculties.containsKey(taId)) {
    System.out.println("Sorry no TA found.");
    return;
}


    Faculty ta = faculties.get(taId);
    System.out.println("Schedule for " + ta.getName() + ":");
    Map<Integer, Lecture> taSchedule = ta.getTASchedule();
    for (int crn : taSchedule.keySet()) {
        Lecture lecture = lectures.get(crn);
        System.out.println(lecture);
        Set<Integer> enrolledStudents = lecture.getEnrolledStudents();
        for (int studentId : enrolledStudents) {
            Student student = students.get(studentId);
            System.out.println("\t" + student);
        }
    }
}


  // choice 5, print the schedule of a Student
  
private static void printStudentSchedule(Scanner scanner) {
               int studentId;
while (true) {
    System.out.print("Enter UCF id: ");
    try {
        studentId = scanner.nextInt();
        if (String.valueOf(studentId).length() != 7) {
            throw new IdException(">>>>>>>>>>>Sorry incorrect format. (Ids are 7 digits)");
        }
        break; // break out of the loop if valid input is entered
    } catch (InputMismatchException e) {
        System.out.println("Sorry, the entered ID is invalid. Please enter a positive 7-digit integer.");
        scanner.next(); // clear scanner buffer
    } catch (IdException e) {
        System.out.println(e.getMessage());
    }
    scanner.nextLine(); // consume the rest of the input line
}


    System.out.println("Record Found: \n");
    System.out.println("Enrolled in the following lectures");


}

  // choice 6, Delete a Lecture
  
private static void deleteLecture(Scanner scanner) {


       System.out.print("Enter CRN of the lecture to delete: ");
       int crn = scanner.nextInt();
        scanner.nextLine();

        Lecture lecture = lectures.get(crn);
      lectures.remove(crn);
        System.out.println("[] Deleted.");
    }




}  

